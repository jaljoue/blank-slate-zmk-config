/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_BASE 1

// #define TBLE_ORTHO   1
// #define TBLE_MIT     1
#define TBLE_DUAL_2U 1

#define SYM_L 1
#define NUM_L 2
#define FUNC_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,matrix_transform =
#ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
#elif defined(TBLE_MIT)
                       &mit_transform;
#else
                       &ortho_transform;
#endif
    };

    macros {
      ZMK_MACRO(
          thumbs_up,
          wait-ms = <1>;
          tap-ms = <5>;
          bindings = <&kp PLUS &kp COLON &kp PLUS &kp N1 &kp COLON &kp RET>;
      )
    };

    tap_dances {
        shifty: shift_caps_word {
                  compatible = "zmk,behavior-tap-dance";
                  label = "TD_SHIFTY";
                  #binding-cells = <0>;
                  tapping-term-ms = <150>;
                  bindings = <&kp LSHFT>, <&caps_word>;
        };
    };

// Conditional layer only when we have less thumb keys
#ifdef TBLE_DUAL_2U
    cond_layers {
        compatible = "zmk,conditional-layers";
        tri {
          if-layers = <NUM_L SYM_L>;
          then-layer = <FUNC_L>;
        };
    };
#endif

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
              &kp ESC   &kp Q    &kp W    &kp E     &kp R      &kp T   &kp Y      &kp U      &kp I       &kp O      &kp P     &kp BKSP
              &kp TAB   &kp A    &kp S    &kp D     &kp F      &kp G   &kp H      &kp J      &kp K       &kp L      &kp SEMI  &kp QUOT
              &kp LSHFT &kp Z    &kp X    &kp C     &kp V      &kp B   &kp N      &kp M      &kp COMMA   &kp DOT    &kp FSLH  &kp RET
              &kp LCTRL &kp LGUI &kp LALT &mo SYM_L      &shifty          &kp SPACE          &mo NUM_L   &kp LALT   &kp RGUI  &kp RSHIFT
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
              &trans    &trans       &trans    &trans    &trans    &trans       &kp LBKT      &kp LT     &kp EQUAL   &kp GT     &kp RBKT   &trans
              &trans    &kp EXCL     &kp AT    &kp HASH  &kp DLLR  &kp PRCNT    &kp LBRC      &kp LPAR   &kp COLON   &kp RPAR   &kp RBRC   &kp PIPE
              &trans    &kp CARET    &kp AMPS  &kp STAR  &kp GRAVE &kp TILDE    &kp BSLH      &kp STAR   &kp MINUS   &kp PLUS   &kp UNDER  &trans
              &trans    &trans       &trans    &trans          &trans                 &trans             &trans      &kp C_PREV &kp C_PP   &kp C_NEXT
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
              &trans     &trans     &trans     &trans      &trans       &trans      &trans     &kp PG_UP  &kp HOME    &kp UP     &kp END    &kp DEL
              &trans     &kp N1     &kp N2     &kp N3      &kp N4       &kp N5      &trans     &kp PG_DN  &kp LEFT    &kp DOWN   &kp RIGHT  &trans
              &trans     &kp N6     &kp N7     &kp N8      &kp N9       &kp N0      &trans     &trans     &trans      &trans     &trans     &trans
              &trans     &trans     &trans     &trans              &trans                  &trans         &trans      &trans     &trans     &trans
            >;
        };

        func_layer {
            label = "Func";
            bindings = <
              &bt BT_CLR &bt BT(0)  &bt BT(1)  &bt BT(2) &bt BT(3) &bt BT(4)  &trans    &trans    &trans       &trans     &trans       &sys_reset
              &trans     &kp F1     &kp F2     &kp F3    &kp F4    &kp F5     &kp F6    &trans    &kp C_VOL_DN &kp C_MUTE &kp C_VOL_UP &trans
              &trans     &kp F7     &kp F8     &kp F9    &kp F10   &kp F11    &kp F12   &trans    &trans       &trans     &trans       &trans
              &trans     &trans      &trans      &trans         &trans              &trans        &trans       &trans     &trans       &bootloader
           >;
        };
    };
};
